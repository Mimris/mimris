{"pageProps":{"frontmatter":{"title":"Overview","date":"Oct 18, 2021","excerpt":"AKM Modeller is a free, open-source, cross-platform modeling tool. It is based on the AKM Modeller Core, which includes model and metamodel definitions, and a graphical user interface. It is available for Windows, macOS and Linux.","cover_image":"images/posts/overview/image001.png"},"slug":"001-Overview","content":"\n# Introduction\n\nThe AKM Modeller (AKMM) is a generic platform for developing and utilizing knowledge models. \nIt can be customized to support any subject area, if the area can be described by entities of different types and by relationships between those types. Both entities and relationships may be described by relevant properties and associated methods.\n\nThe user interface is implemented as a graphic modelling environment where each concept is visualized graphically to ease communication between users. The visualization of objects and relationships is customizable.\n\nThe Modeller differentiates between a meta-model (a modelling language) and a model. \nThe meta-model defines the object types and relationship types - e.g. may Person and Car be your object types, \nwhile owns or rents may be your relevant relationship types between those object types. \nBased on such a meta-model you may build a model of actual persons and cars and connect the relationships between the persons and their cars.\n\ntable of contents\n\n[The Project](#the-project)\n\n[The Metamodel](#the-metamodel)\n\n[The Model](#the-model)\n\n[The Modelview](#the-modelview)\n\n[About relationships](#about-relationships)\n\n\n# Concepts\n\nThe models in AKMM are organized in Projects, as shown in the figure below.\n\n## The Project\n\n![alt text](/images/posts/overview/image001.png)\n\nA Project may contain one or more Metamodels, and one or more Models. \nA Model is based on one Metamodel, but several Models may share the same Metamodel. \n\nTo see the content of a model, Modelviews are used. A Modelview shows visualizations of objects and relationships.\n\n---\n - [-back to the top-](#introduction)\n---\n\n## The Metamodel\n\nA fundamental concept in AKMM is the Metamodel as illustrated in the figure below.\n\nOn the base level the Metamodel consists of Object types and Relationship types, and the\ndefinition of how they play together.\nA Relationship type points to two object types, the FROM object type and the TO object type,\nwhich tells us that a relationship in AKMM has a direction, which normally is shown in the\nmodel views with an arrow pointing to the TO object.\nIn addition, the Metamodel contains Object Typeviews, that define how the objects of a given\ntype are visualized, and Relationship Typeviews that define how relationships of a given type\nare visualized.\n\n![alt text](/images/posts/overview/image002.png)\n\n---\n - [-back to the top-](#introduction)\n---\n\n\n## The Model\n\nA Model contains objects and relationships. An Object refer to its type â€“ the Object type, while a Relationship refers to its Relationship type, as illustrated below. \n\n![alt text](/images/posts/overview/image003.png)\n\n---\n - [-back to the top-](#introduction)\n---\n\n## The Modelview\n\nThe model content is visualized in one or more Modelviews. Each Modelview contains Object\nviews and Relationship views as illustrated below. Each Object view refers to the Object it\nrepresents, as do the Relationship views.\nOne Object may have several Object views, even in the same Modelview, while it is most\ncommon to be visualized in different Modelviews. The same goes for Relationship views.\n\n![alt text](/images/posts/overview/image004.png)\n\n---\n - [-back to the top-](#introduction)\n---\n \n## About relationships\n\nRelationship types have some attributes that are specific to relationships.\nThese are:\n\n        -\tCardinality from\n        -\tCardinality to\n        -\tName from\n        -\tName to\n\nThis implies that relationship *cardinality* is supported, i.e. the ability to define e.g. one-to-one, one-to-many, many-to-many relationships, or other combinations. The cardinality is specified on both ends of the relationship type.\n\nYou may also give a *from-name* and a *to-name* to the relationship type.\n\n---\n - [-back to the top-](#introduction)\n---\n\n"},"__N_SSG":true}