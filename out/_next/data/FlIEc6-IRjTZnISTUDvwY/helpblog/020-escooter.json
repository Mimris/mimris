{"pageProps":{"frontmatter":{"title":"A Demo Solution Model","date":"June 8, 2022","excerpt":"The purpose of this tutorial is to make enhancement to an existing Consept Model of rental service for e-Scooters and cars .","cover_image":"images/posts/escooter/image_020-1.png"},"slug":"020-escooter","content":"\n## Task: To enhance an existing concept model of rental service for e-Scooters and cars.\n---\n### Concept Model overall structure\n\nThe modelview below contain a show the object/information types needed in a rental service for e-scooters and cars. In the \"Type definition\" container at the right you se currently defined Objecttypes Types: \"**Person**\", \"**Company**\", \"**Fleet**\", \"**Location**\", \"**EScooter**\" and \"**Car**\", with Relationship Types \"**has**\" and \"**contains**\".\n\nIn the left container we have the predefined (from IRTV-metamodel ) objects **Role** and **Tasks** used for the rental service.\n\n![alt text](/images/posts/escooter/image_020-1.png)\n\nA person fills the role of User that performs the task of renting an e-scooter or car.\nThe person has a position (coordinates) which is used to determine the location where to seach for nearby e-scooters or cars.\nThe rental service is based on the concept of a fleet of e-scooters and cars.\nThe fleet is a collection of vehicles which consists be e-scooters and cars\n\n---\n\n### Property and relationship definition for the Car and EScooter Objecttypes\n\nTo define more details of the model we add the properties and relationships in a new Modelview named \"05-Vehicle\" shown below. the **Car** and **EScooter** are defined with some common properties, and **Vehicle** that has some special properties for the rental service, like **vehicleId** and **price**. Vehicle aslo contains the GPS coordinates of the vehicle.\nOn the right side of the modelview we see the datatype definition for the properties. The defualt datatype is \"String\".\n\n\n![alt text](/images/posts/escooter/image_020-2.png)\n\n---\n\n### Property and relationship definition for the Person and Vehicle Objecttype related to position with Coordnates property.\n\nBelow we see the definition of the properties and relationships for the Person, Vehicle Position Objecttypes.\n\n\n![alt text](/images/posts/escooter/image_020-3.png)\n\n---\n\n### Datatype, Inputpatterns and Value definitions\n\nThe datatype definition for the properties is shown below. A DataType can have list fo allowed values.\nThe DataType can also have defined a InputPattern which is a regular expression that defines the allowed values for a property.\n\n![alt text](/images/posts/escooter/image_020-4.png)\n\n---\n\n### Define a View for specific Tasks\n\nVi can define a View for specific Tasks. The View can be used to define the properties that are used in that Task.\nBelow you can se that the Locate Vehicle Task uses the GPS coordinates for the Person and the of the vehicles to find vehicles nearby.\n\n![alt text](/images/posts/escooter/image_020-5.png)\n\n---\n\n### Generating a Metamodel from the Type definition model.\n\nFrom this Type definition model, we can now generate a Metamodel that apears in the as Types in the palette on left side in the Solution model. This Types are used to build the solution model and by creating instances of the types.\n\n![alt text](/images/posts/escooter/image_020-11.png)\n\n---\n\n### Add Role and Tasks for maintenance and repair of e-scooters.\n\nWe now want to add new Tasks for maintenance and repair of e-scooters.\nWe start with copying the Type definition model from the 01-ConseptRental Modelview, and paste view into the 01.1-ConseptMaint modelview. Then we add a new Container \"Task Model Maintenance\" where we add the new Tasks and Roles.\nThen we add relationships to the Type definition model.\n\n![alt text](/images/posts/escooter/image_020-20.png)\n\n---\n\n### The generated Metamodel.\n\nThe generated Metamodel vil be used as Metamodel for the Solution model.\nThe Object types are shown below in the Palette types at the left.\n\n#### Generated objecttypes\n12\n![alt text](/images/posts/escooter/image_020-32.png)\n\n#### Copied role and tasks objects\n\nThe Rols and Tasks are copied from the Type definition model and can now be used in the solution model.\n\n![alt text](/images/posts/escooter/image_020-31.png)\n\n#### Test of the generated Metamodel\n\nWe can now test the generated Metamodel by creating instances of the objecttypes.\n\n<details><summary markdown=\"span\">\n    How to create instances from the objecttypes\n    </summary>\n    Drag and drop the objecttypes from the Palette to the Canvas (Modelling area).\n    Right click on the object and select \"Edit Object\" to open the property dialog to add attribute values.\n    <img src=\"/images/posts/escooter/image_020-35.png\" alt=\"alt text\" width=\"100%\">\n</details>\n\n---\n\n![alt text](/images/posts/escooter/image_020-31.png)\n\n#### Test Solution Model\n\nBelow is a test solution model, where we use the generated metamodel to build an example model to test the Metamodel.\n\nIf we are not satisfied with the generated Metamodel, we can change the generated Metamodel and rerun the generation.\n\n![alt text](/images/posts/escooter/image_020-36.png)\n\n---\n\n---\n\n## Other examples of use AKM Modeller.\n\nObject types imported from OSDU Repository.\n\nWe can import type definitions from OSDU Repository.\nThis is JSON Type definition stored as JSON files.\n\n![alt text](/images/posts/escooter/imagetmp5.png)\n\nBelow is a model view of the imported type definitions.\n\n![alt text](/images/posts/escooter/imagetmp3.png)\n![alt text](/images/posts/escooter/imagetmp4.png)\n![alt text](/images/posts/escooter/imagetmp2.png)\n![alt text](/images/posts/escooter/imagetmp1.png)\n"},"__N_SSG":true}